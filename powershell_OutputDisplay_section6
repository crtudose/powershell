Write output directly to a text file
------------
Out-File [-FilePath] <string> [-Append] [-Force]
'Powershell is a very good scripting tool' | Out-File C:\PS\Outputfile.txt
'Powershell is a very good scripting tool' | Out-File C:\PS\Outputfile.txt -Append
Get-Process | Out-File C:\ps\Processoutput.txt
Invoke-Item C:\ps\Processoutput.txt # This command opens the file

Open files with gridview
-------------------
Out-gridview cmdlet sends the output from a command to a grid view window where the output is displayed in an interactive table
Get-Process | Out-gridview

Get-Process | Select-Object -Property Name, WorkingSet, PeakWorkingSet | 
  Sort-Object -Property.workingSet -Descending | Out-Gridview
($A = Get-ChildItem -Path $PSHOME -Recurse) | Out-Gridview
Invoke-Command -ComputerName VM2 -ScriptBlock {Get-Service} Out-Gridview

Saving output as CSV
------------------------
Export-csv converts objects into a series of comma separated value CSV strings and saves into a file
Get-Service | Select-Object Name, DisplyName, Status | Export-Csv -path C:\Users\drand\Downloads\csv_file.csv
Invoke-Item C:\Users\drand\Downloads\csv_file.csv

Display output in html
------------------
ConvertTo-HTML converts .net objects into html that can be displayed in a web browser
Get-Service | ConvertTo-Html -As Table | out-file C:\ps\htmlout.html
Invoke-Item  C:\ps\htmlout.html
Get-Service | Select-Object Name, DisplyName, Status | ConvertTo-Html -As Table | Out-File C:\Users\drand\Downloads\csv_file.csv
Invoke-Item C:\Users\drand\Downloads\csv_file.csv
Get-Service | Select-Object Name, DisplyName, Status | ConvertTo-Html -As Table -PreContent "report generated at $(Get-Date)" | Out-File C:\Users\drand\Downloads\csv_file.csv
Invoke-Item C:\Users\drand\Downloads\csv_file.csv

# combine 2 outputs to an html file
$os=Get-WmiObject -Class Win32_Operatingsystem -ComputerName localhost | ConvertTo-Html -As Table -Fragment -PreContent "<h2>Report gerated on $(Get-Date) </h2>" |Out-String
$services=Get-Service | select name, DisplayName, Status  | ConvertTo-Html -As Table -Fragment -PreContent "<h2>Hardware</h2>" |Out-String

ConvertTo-Html -Title "sys information for VM1 " -PreContent $os,$services -Body "<h2> Gathering OS Details <h2>" |Out-File 'C:\PS\html.html' 
Invoke-Item C:\PS\html.html

$Header = @"
<style>
TABLE {border-width: 1px; border-style: solid; border-color: black; border-collapse: collapse;}
TD {border-width: 1px; padding: 3px; border-style: solid; border-color: black;}
</style>
"@

$os=Get-WmiObject -Class Win32_Operatingsystem -ComputerName localhost | ConvertTo-Html -As Table -PreContent "<h2>Report gerated on $(Get-Date) </h2>" |Out-String
$services=Get-Service | select name, DisplayName, Status  | ConvertTo-Html -As Table  -PreContent "<h2>Hardware</h2>" |Out-String

ConvertTo-Html -Title "sys information for VM1 " -PreContent $os,$services -Body "<h2> Gathering OS Details <h2>" -Head $header |Out-File 'C:\PS\html.html' 
Invoke-Item C:\PS\html.html
