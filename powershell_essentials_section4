1. Variables, datatypes
--------------------
Please watch out the Variables and Datatypes lecture to get sync with these scripts. 

$myvariable=1+1
Write-Host $myvariable

$myvariable='1'
Write-Host $myvariable

$myvariable='1'+'1'
Write-Host $myvariable

$myvariable="1"+"1"
Write-Host $myvariable

$myvariable ="$(1+2)"
Write-Host $myvariable

$myvariable ='$(1+2)'
Write-Host $myvariable

$server='vm1'
Write-Host '$server'
Write-Output "$server"

$myvariable = 1
$myvariable.GetType()

$myvariable=1.4
Write-Host $myvariable

[int]$myvariable=1.4 
Write-Host $myvariable

[float]$myvariable=1.4 
Write-Host $myvariable

[datetime]$myvariable=1.4 
Write-Host $myvariable

[boolean]$myvariable=1.4 
Write-Host $myvariable

[long]$myvariable=1.4 
Write-Host $myvariable

$myarray='a','b','c'
$myarray[2]
$myarray.GetType()

2. Arrays
-----------------------
$a=1,2,3,4,5
$a
$a.GetType()

$a=('1','2','3','4','5')
$a.GetType()

$servers=@('VM1','VM2','VM3','VM4','VM5')
$servers
$servers[0]
$servers[-1]

$a=1,2,3,4,5
$a
$a.GetType()

$a=('1','2','3','4','5')
$a.GetType()

$servers=@('VM1','VM2','VM3','VM4','VM5')
$servers
$servers[0]
$servers[-1]

$services=get-service
$services[0]
$services.GetType()

3. Loops
---------------------
for($i=0;$i -lt 10;$i++)
{
$i
}

for (($i = 0), ($j = 0); $i -lt 10 -and $j -lt 10; $i++, $j++)
{
  "`$j:$i"
  "`$i:$j"
}

$serverlist = Get-Content C:\Users\drand\Downloads\Variables+and+Datatypes+scripts.txt
$serverlist

for($i=0,$i -lt 3;$i++)
{
'Script will be executing in the server ' + $serverlist[$i]
Test-Connection $serverlist[$i]
}

Foreach loops
---------------
$servers=Get-Content C:\Users\drand\Downloads\serverlist.txt
foreach($server in $servers)
{
Write-Host 'Server name is : '$server 
}

Conditionals
------------
$x = 30
if($x -eq 30){
  write-host("this is if statement")
}else {
  write-host("this is else statement")
}


$services=Get-Service
$services_count=$services.Count
if($services_count -eq 319){
Write-Host 'Total services count in my system = 319'
}
elseif($services_count -gt 100)
{
Write-Host 'Total service count in my system is greater than 100'
}
else
{
Write-Host 'Total services count in my system is less than 100'
}

Comparison operators:
----------------
-eq, -ne, -gt, -ge -lt -le
-like -not like -match -not match
-Contains -not contains -in -notin
-replace
-is -isnot (returns true or false if the objects are not the same)

While / DoWhile Loops
-------------------
$i = 9
while($i -lt 10)
{
Write-Host 'yes i am in the while loop'
}

$BITS_servicestatus = Get-Service | where-Object { $_.name -eq 'BITS'}
$BITSstatus=$BITS_servicestatus.$Status
while($BITSstatus -eq 'Stopped')
{
Write-Host 'Status of the BITS service is stopped'
$BITS_servicestatus = Get-Service | where-Object { $_.name -eq 'BITS'}
$BITSstatus=$BITS_servicestatus.$Status
}


# the Do-While loop in PowerShell will run the loop first and then evaluate the While 
$OS='Windows'
do
{
for($i=0;$i -lt 100;$i++)
{
Write-host 'My Operation is Windows'+$i
}
}
while($OS -eq 'Linux ')

Get-Content
-----------------
Get-Content -Path D:\Powershell_Learning\ErrorLog.txt
Get-Content -Path D:\Powershell_Learning\* -Include '*.txt'
Get-Content -Path D:\Powershell_Learning\ErrorLog.txt -First 2
Get-Content -Path D:\Powershell_Learning\ErrorLog.txt -Tail 2
Get-Content -Path D:\Powershell_Learning\ErrorLog.txt | Where-Object {$_ -like '*Fail*'}

Get-Service
-------------
shows the services currently running the computer
PS C:\Windows\system32> Get-Service | Get-Member
PS C:\Windows\system32> Get-Service | Select-Object Name,DisplayName,StartType,Status 

PS C:\Windows\system32> Get-Service | Select-Object Name,DisplayName,StartType,Status | Where-Object {$_.Name -eq 'WSearch'}
Name    DisplayName    StartType  Status
----    -----------    ---------  ------
WSearch Windows Search Automatic Running

PS C:\Windows\system32> Get-Service | Select-Object Name,DisplayName,StartType,Status | Where-Object {$_.Name -eq 'WSearch'} | Stop-Service

Get-ChildItem
------------
gets the items and child items in one or more specified locations
Get-ChildItem -Path D:\
Get-ChildItem -Path D:\Powershell_Learning
Get-ChildItem -Path D:\Powershell_Learning | select Name,LastWriteTime

Get-ChildItem -Path D:\Powershell_Learning -Recurse
Get-ChildItem -Path D:\Powershell_Learning -Recurse -Include '*txt'
Get-ChildItem -Path HKLM:\HARDWARE
Get-ChildItem | Get-Member
Get-ChildItem | select LastAccessTime

Functions
---------
function sum()
{
param($a,$b)
$c=$a+$b
Write-Host 'sum of the numbers is :' $c
}
sum -a 25 -b 30

function myprocess()
{
Get-Process
}
myprocess

function checkOS()
{
param($OS)
if($OS -eq 'windows')
{
Write-Host 'Script will be executing in windows'
}
elseif($OS -eq 'Linux')
{
Write-Host 'Script will be executing in linux'
}
elseif($OS -eq 'macos')
{
Write-Host 'Script will be executing in macos'
}
}
checkOS Windows

Modules
--------
important for automation
cmdlets, providers, functions, workflows, variables, aliases saved as .psm1 extension
default location $end:PSModulePath
reusability and portability

# Get-Module -ListAvailable

script modules - psm1 files having functions and other scripts
binary modules - compiled dll files typically created by developers
manifest modules - script modules that contain a manifest (contents of a module and determines how a module is processed)
dynamic modules - modules that are never written to disk and are only avaialble in memory

function name()
{
Write-Host 'name of the employee is john'
}

function address()
{
Write-Host 'NY, New York'
}

function jobaddress()
{
Write-Host 'data scientist'
}

PS C:\Windows\system32> name
name of the employee is john

PS C:\Windows\system32> address
NY, New York

PS C:\Windows\system32> jobaddress
data scientist

PS C:\Windows\system32> Import-Module C:\Users\drand\Downloads\PSModules\jobdescription.psm1

function machinename()
{
hostname
}

function username()
{
whoami
}

function bitsservice()
{
Get-Service | where {$_.Name -eq 'BITS'}
}

PS C:\Windows\system32> Import-Module C:\Users\drand\Downloads\PSModules\findservice.psm1

PS C:\Windows\system32> username
desktop-t0v4o7j\drand

PS C:\Windows\system32> machinename
DESKTOP-T0V4O7J

PS C:\Windows\system32> bitsservice

Status   Name               DisplayName                           
------   ----               -----------                           
Stopped  BITS               Background Intelligent Transfer Ser...

Error handling
--------------
try
{
Write Hst 'this is an example of try catch mechanism'
}
catch
{
Write-Host 'this is a catch block'
}
finally
{
Write-Host 'this is the finally block , Whatever we are writing here will be executed irrespective of what happened above'
}

Terminating error:
try
{
Get-ChildItem d:\ps
}
catch
{
Write-Host 'this is a catch block'
}

Non-Terminating error:
try
{
Get-ChildItem d:\p -ErrorAction Stop
}
catch
{
Write-Host 'this is a catch block of a non terminating error'
$_.Exception
$_.Exception.Message
$_.Exception.Itemname
}

Secure credentials
----------------
ConvertFrom-SecureString // ConvertTo-SecureString
Get-Credential 
Get-WmiObject -Class win32_operatingsystem -ComputerName VM1 -Credential $credential
(Get-Credential).Password
